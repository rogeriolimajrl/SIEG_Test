<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>NBomber</name></assembly>
<members>
<member name="P:NBomber.Constants.OperationTimeoutMessage">
<summary>
 Default status codes
</summary>
</member>
<member name="P:NBomber.Constants.DefaultSimulationDuration">
<summary>
 Default timeouts
</summary>
</member>
<member name="M:NBomber.Extensions.Internal.Array.shuffle``1(``0[])">
<summary>
 copy and shuffle
</summary>
</member>
<member name="M:NBomber.Extensions.Internal.Array.shuffleInPlace``1(``0[])">
<summary>
 shuffle an array (in-place)
</summary>
</member>
<member name="P:NBomber.Domain.Stats.ScenarioStatsActor.State.UseTempBuffer">
<summary>
 agents stats
</summary>
</member>
<member name="T:NBomber.Domain.Scheduler.ConstantActorScheduler.SchedulerExec">
<summary>
 (createActors: count -&gt; fromIndex -&gt; ScenarioActor[]) (actorPool) (scheduledActorCount) (injectInterval)
</summary>
</member>
<member name="T:NBomber.Domain.Scheduler.OneTimeActorScheduler.SchedulerExec">
<summary>
 (createActors: count -&gt; fromIndex -&gt; ScenarioActor[]) (actorPool) (scheduledActorCount) (injectInterval)
</summary>
</member>
<member name="M:NBomber.FSharp.Step.run``1(System.String,NBomber.Contracts.IScenarioContext,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Threading.Tasks.Task{NBomber.Contracts.Response{``0}}})">
 <summary>
 Runs a step.
 </summary>
 <param name="name">The name of the step. It can be any name except reserved name "global information".</param>
 <param name="context">ScenarioContext represents the execution context of the currently running Scenario. It provides functionality to log particular events, get information about the test, thread id, scenario copy/instance number, etc. Also, it provides the option to stop all or particular scenarios manually.</param>
 <param name="run">It's a function that represents user action that will be invoked and measured by NBomber.</param>
</member>
<member name="T:NBomber.FSharp.Step">
<summary>
 Step represents a single user action like login, logout, etc. Step helps you granulate your Scenario execution on parts and measure them separately.
 In case you don&apos;t need to split your Scenario on parts you can use just Scenario without any Step.
</summary>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.runWithArgs(System.Collections.Generic.IEnumerable{System.String},NBomber.Contracts.NBomberContext)">
 <summary>
 Runs scenarios with CLI arguments.
 </summary>
 <param name="args">CLI args</param>
 <param name="context">NBomberContext</param>
 <example>
 <code>
 Example:
 --config=config.json --infra=infra_config.json --target=scenario_1
 </code>
 </example>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.run(NBomber.Contracts.NBomberContext)">
<summary>
 Runs scenarios.
</summary>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.enableStopTestForcibly(System.Boolean,NBomber.Contracts.NBomberContext)">
 <summary>
 This function enables or disables to forcibly halt all tests at the end of the simulation even though NBomber is overloaded.
 Use when you need to stop your test at a precise time even if your NBomber is overloaded and can have a short lag.
 </summary>
 <param name="enable">The default value is false.</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.enableHintsAnalyzer(System.Boolean,NBomber.Contracts.NBomberContext)">
 <summary>
 This function enables or disables hints analyzer.
 Hints analyzer - analyzes statistics at the end of the test to provide hints in case of finding the wrong usage of NBomber or some environmental issues.
 </summary>
 <param name="enable">The default value is false.</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withLoggerConfig(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Serilog.LoggerConfiguration},NBomber.Contracts.NBomberContext)">
 <summary>
 Sets logger configuration.
 Make sure that you always return a new instance of LoggerConfiguration.
 You can also configure the logger via JSON infrastructure config file.
 For this use NBomberRunner.loadInfraConfig
 </summary>
 <param name="createLoggerConfig">creates a new instance of LoggerConfiguration</param>
 <param name="context">NBomberContext</param>
 <example>
 <code>
 NBomberRunner.withLoggerConfig (fun () -> LoggerConfiguration())
 </code>
 </example>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withMinimumLogLevel(Serilog.Events.LogEventLevel,NBomber.Contracts.NBomberContext)">
 <summary>
 Sets minimum log level.
 </summary>
 <param name="level">The default value is Debug</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.loadInfraConfig(System.String,NBomber.Contracts.NBomberContext)">
 <summary>
 Loads infrastructure configuration by file path or by HTTP URL.
 </summary>
 <param name="path">File path or HTTP URL to JSON config.</param>
 <param name="context"></param>
 <example>
 <code>
 // load by file path
 NBomberRunner.loadInfraConfig "./my-test/infra-config.json"
 // load by URL
 NBomberRunner.loadInfraConfig "https://my-test/infra-config.json"
 </code>
 </example>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.loadConfig(System.String,NBomber.Contracts.NBomberContext)">
 <summary>
 Loads configuration by file path or by HTTP URL.
 </summary>
 <param name="path">File path or HTTP URL to JSON config.</param>
 <param name="context">NBomberContext</param>
 <example>
 <code>
 // load by file path
 NBomberRunner.loadConfig "./my-test/config.json"
 // load by URL
 NBomberRunner.loadConfig "https://my-test/config.json"
 </code>
 </example>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withWorkerPlugins(Microsoft.FSharp.Collections.FSharpList{NBomber.Contracts.IWorkerPlugin},NBomber.Contracts.NBomberContext)">
<summary>
 Sets worker plugins.
 Worker plugin is a plugin that starts at the test start and works as a background worker.
</summary>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withReportingSinks(Microsoft.FSharp.Collections.FSharpList{NBomber.Contracts.IReportingSink},NBomber.Contracts.NBomberContext)">
<summary>
 Sets reporting sinks.
 ReportingSink provides functionality for saving real-time and final statistics.
</summary>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withReportingInterval(System.TimeSpan,NBomber.Contracts.NBomberContext)">
 <summary>
 Sets real-time reporting interval.
 </summary>
 <param name="interval">Default value: 5 sec, min value: 5 sec</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withoutReports(NBomber.Contracts.NBomberContext)">
<summary>
 Sets to run without reports
</summary>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withReportFormats(Microsoft.FSharp.Collections.FSharpList{NBomber.Contracts.Stats.ReportFormat},NBomber.Contracts.NBomberContext)">
 <summary>
 Sets output report formats.
 </summary>
 <param name="reportFormats">The default value is: [Txt; Html; Csv; Md]</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withReportFolder(System.String,NBomber.Contracts.NBomberContext)">
 <summary>
 Sets output report folder path.
 </summary>
 <param name="reportFolderPath">Default folder path: "./reports".</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withReportFileName(System.String,NBomber.Contracts.NBomberContext)">
 <summary>
 Sets output report file name.
 </summary>
 <param name="reportFileName">Default name: "nbomber_report-{CurrentTime}"</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withTestName(System.String,NBomber.Contracts.NBomberContext)">
 <summary>
 Sets test name.
 </summary>
 <param name="testName">Default value is: "nbomber_default_test_name".</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withTestSuite(System.String,NBomber.Contracts.NBomberContext)">
 <summary>
 Sets test suite name.
 </summary>
 <param name="testSuite">Default value is: "nbomber_default_test_suite_name".</param>
 <param name="context">NBomberContext</param>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.withTargetScenarios(Microsoft.FSharp.Collections.FSharpList{System.String},NBomber.Contracts.NBomberContext)">
 <summary>
 Sets target scenarios among all registered that will execute during the session.
 </summary>
 <param name="scenarioNames">Names of scenarios that should be started during the session.</param>
 <param name="context">NBomberContext</param>
 <example>
 <code>
 NBomberRunner.registerScenarios [scenario_1; scenario_2; scenario_3]
 |> NBomberRunner.withTargetScenarios ["scenario_1"] // only scenario_1 will be executed
 </code>
 </example>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.registerScenarios(Microsoft.FSharp.Collections.FSharpList{NBomber.Contracts.ScenarioProps})">
<summary>
 Registers scenarios in NBomber environment.
</summary>
</member>
<member name="M:NBomber.FSharp.NBomberRunner.registerScenario(NBomber.Contracts.ScenarioProps)">
<summary>
 Registers scenario in NBomber environment.
</summary>
</member>
<member name="T:NBomber.FSharp.NBomberRunner">
<summary>
 NBomberRunner is responsible for registering and running scenarios.
 Also it provides configuration points related to infrastructure, reporting, loading plugins.
</summary>
</member>
<member name="M:NBomber.FSharp.Scenario.withMaxFailCount(System.Int32,NBomber.Contracts.ScenarioProps)">
 <summary>
 This function overrides the default value of MaxFailCount for Scenario.
 MaxFailCount is incremented on every failure or failed Response.
 When a scenario reaches MaxFailCount, NBomber will stop the whole load test.
 In the case of cluster mode, MaxFailCount is tracked per each NBomber instance exclusively.
 It doesn't aggregate across the cluster. So if on any NBomber node MaxFailCount is reached, NBomber will stop the whole load test.
 </summary>
 <param name="maxFailCount">The default value is 5_000.</param>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
</member>
<member name="M:NBomber.FSharp.Scenario.withRestartIterationOnFail(System.Boolean,NBomber.Contracts.ScenarioProps)">
 <summary>
 This function allows enabling or disabling the auto restart of Scenario iteration in case of Step failure.
 Sometimes, you would like to handle failed steps differently: retry, ignore or use a fallback.
 For such cases, you can disable Scenario iteration auto restart.
 By default, when a Step returns a failed Response or unhandled exception was thrown,
 NBomber will automatically mark the whole iteration as failed and restart it.
 If you want to disable auto restart of Scenario iteration you should set 'shouldRestart = false'.
 </summary>
 <param name="shouldRestart">The default value is true.
 If you want to disable auto restart of Scenario iteration you should set 'shouldRestart = false'.</param>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
</member>
<member name="M:NBomber.FSharp.Scenario.withLoadSimulations(Microsoft.FSharp.Collections.FSharpList{NBomber.Contracts.LoadSimulation},NBomber.Contracts.ScenarioProps)">
 <summary>
 This function allows configuring the load simulations for the current Scenario.
 Load simulation allows configuring parallelism and workload profiles.
 </summary>
 <param name="loadSimulations">Default value is: [KeepConstant(copies = 1, during = minutes 1)]</param>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
 <example>
 <code>
 scenario
 |> withLoadSimulations [
     RampingConstant(copies = 50, during = seconds 30) // ramp-up from 0 to 50 copies
     KeepConstant(copies = 50, during = seconds 30)
 ]
 </code>
 </example>
</member>
<member name="M:NBomber.FSharp.Scenario.withoutWarmUp(NBomber.Contracts.ScenarioProps)">
 <summary>
 This function disables warm-up.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
</member>
<member name="M:NBomber.FSharp.Scenario.withWarmUpDuration(System.TimeSpan,NBomber.Contracts.ScenarioProps)">
 <summary>
 This function sets duration of warm-up phase.
 </summary>
 <param name="duration">By default warm-up duration is 30 seconds.</param>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
</member>
<member name="M:NBomber.FSharp.Scenario.withClean(Microsoft.FSharp.Core.FSharpFunc{NBomber.Contracts.IScenarioInitContext,System.Threading.Tasks.Task{Microsoft.FSharp.Core.Unit}},NBomber.Contracts.ScenarioProps)">
 <summary>
 Cleans scenario's resources and all its dependencies.
 This function should be used to clean the scenario's resources after the test finishes.
 Scenario clean will be invoked after warm-up and bombing phases.
 If Scenario clean throws an exception, the NBomber logs it and continues execution.
 </summary>
 <param name="cleanFunc">Represent lambda function that will be invoked to start Scenario cleaning.
 If this lambda function throws an exception, the NBomber logs it and continues execution.</param>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
</member>
<member name="M:NBomber.FSharp.Scenario.withInit(Microsoft.FSharp.Core.FSharpFunc{NBomber.Contracts.IScenarioInitContext,System.Threading.Tasks.Task{Microsoft.FSharp.Core.Unit}},NBomber.Contracts.ScenarioProps)">
 <summary>
 Initializes scenario and all its dependencies.
 You can use it to prepare your target system, populate the database, or read and apply the JSON configuration for your scenario.
 Scenario init will be invoked before warm-up and bombing phases.
 If Scenario init throws an exception, the NBomber load test will stop the execution.
 </summary>
 <param name="initFunc">Represent lambda function that will be invoked to start Scenario initialization.
 If this lambda function throws an exception, the NBomber load test will stop the execution.</param>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
</member>
<member name="M:NBomber.FSharp.Scenario.empty(System.String)">
 <summary>
 Creates empty scenario.
 An empty scenario is useful when you want to create the scenario to do only initialization or cleaning and execute it separately.
 The need for this can be when you have a few scenarios with the same init logic, and you want to run this init logic only once.
 </summary>
 <param name="name">The name of the scenario.</param>
</member>
<member name="M:NBomber.FSharp.Scenario.create``1(System.String,Microsoft.FSharp.Core.FSharpFunc{NBomber.Contracts.IScenarioContext,System.Threading.Tasks.Task{``0}})">
 <summary>
 Creates a scenario.
 </summary>
 <param name="name">The name of the scenario.</param>
 <param name="run">It's a function that represents user flow that will be invoked and measured by NBomber.</param>
</member>
<member name="T:NBomber.FSharp.Scenario">
<summary>
 Scenario play the most crucial role in building load tests with NBomber.
 Scenario represents typical user behavior.
 In other words - it’s a workflow that virtual users will follow.
 Technically speaking, each Scenario instance works as a dedicated .NET Task.
</summary>
</member>
<member name="M:NBomber.CSharp.Simulation.RampingInject(System.Int32,System.TimeSpan,System.TimeSpan)">
 <summary>
 Injects a given number of Scenario copies(instances) with a linear ramp over a given duration.
 Each Scenario copy behaves like a short-running thread that runs only once and then is destroyed.
 With this simulation, you control the Scenario injection rate and injection interval.
 Use it for a smooth ramp up and ramp down.
 Usually, this simulation type is used to test HTTP API.
 </summary>
 <param name="rate">The injection rate of Scenario copies. It configures how many concurrent copies will be injected at a time.</param>
 <param name="interval">The injection interval. It configures the interval between injections. </param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="M:NBomber.CSharp.Simulation.RampingConstant(System.Int32,System.TimeSpan)">
 <summary>
 Adds or removes a given number of Scenario copies(instances) with a linear ramp over a given duration.
 Each Scenario copy behaves like a long-running thread that runs continually(by specified duration) and will be destroyed when the current load simulation stops.
 Use it for a smooth ramp up and ramp down.
 Usually, this simulation type is used to test databases, message brokers, or any other system that works with a static client's pool of connections and reuses them.
 </summary>
 <param name="copies">The number of concurrent Scenario copies that will be running in parallel.</param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="M:NBomber.CSharp.Simulation.Pause(System.TimeSpan)">
 <summary>
 Introduces Scenario pause simulation for a given duration.
 It's useful for cases when some Scenario start should be delayed or paused in the middle of execution.
 </summary>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="M:NBomber.CSharp.Simulation.KeepConstant(System.Int32,System.TimeSpan)">
 <summary>
 Keeps activated(constantly running) a fixed number of Scenario copies(instances) which executes as many iterations as possible for a specified duration.
 Each Scenario copy behaves like a long-running thread that runs continually(by specified duration) and will be destroyed when the current load simulation stops.
 Use it when you need to run and keep a constant amount of Scenario copies for a specific period.
 Usually, this simulation type is used to test databases, message brokers, or any other system that works with a static client's pool of connections and reuses them.
 </summary>
 <param name="copies">The number of concurrent Scenario copies that will be running in parallel.</param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="M:NBomber.CSharp.Simulation.InjectRandom(System.Int32,System.Int32,System.TimeSpan,System.TimeSpan)">
 <summary>
 Injects a given random number of Scenario copies(instances) during a given duration.
 Each Scenario copy behaves like a short-running thread that runs only once and then is destroyed.
 With this simulation, you control the Scenario injection rate and injection interval.
 Use it when you want to maintain a random rate of requests without being affected by the performance of the system you load test.
 Usually, this simulation type is used to test HTTP API.
 </summary>
 <param name="minRate">The min injection rate of Scenario copies.</param>
 <param name="maxRate">The max injection rate of Scenario copies.</param>
 <param name="interval">The injection interval. It configures the interval between injections.</param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="M:NBomber.CSharp.Simulation.Inject(System.Int32,System.TimeSpan,System.TimeSpan)">
 <summary>
 Injects a given number of Scenario copies(instances) during a given duration.
 Each Scenario copy behaves like a short-running thread that runs only once and then is destroyed.
 With this simulation, you control the Scenario injection rate and injection interval.
 Use it when you want to maintain a constant rate of requests without being affected by the performance of the system you load test.
 Usually, this simulation type is used to test HTTP API.
 </summary>
 <param name="rate">The injection rate of Scenario copies. It configures how many concurrent copies will be injected at a time.</param>
 <param name="interval">The injection interval. It configures the interval between injections. </param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="T:NBomber.CSharp.Simulation">
<summary>
 Represents Load Simulation.
 Load Simulation allows configuring parallelism and workload profiles.
</summary>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithoutReports(NBomber.Contracts.NBomberContext)">
<summary>
 Sets to run without reports
</summary>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithWorkerPlugins(NBomber.Contracts.NBomberContext,NBomber.Contracts.IWorkerPlugin[])">
<summary>
 Sets worker plugins.
 Worker plugin is a plugin that starts at the test start and works as a background worker.
</summary>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithTestSuite(NBomber.Contracts.NBomberContext,System.String)">
 <summary>
 Sets test suite name.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="testSuite">Default value is: "nbomber_default_test_suite_name".</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithTestName(NBomber.Contracts.NBomberContext,System.String)">
 <summary>
 Sets test name.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="testName">Default value is: "nbomber_default_test_name".</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithTargetScenarios(NBomber.Contracts.NBomberContext,System.String[])">
 <summary>
 Sets target scenarios among all registered that will execute during the session.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="scenarioNames">Names of scenarios that should be started during the session.</param>
 <example>
 <code>
 NBomberRunner
     .RegisterScenarios(scenario_1, scenario_2, scenario_3)
     .WithTargetScenarios("scenario_1") // only scenario_1 will be executed
 </code>
 </example>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithReportingSinks(NBomber.Contracts.NBomberContext,NBomber.Contracts.IReportingSink[])">
<summary>
 Sets reporting sinks.
 ReportingSink provides functionality for saving real-time and final statistics.
</summary>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithReportingInterval(NBomber.Contracts.NBomberContext,System.TimeSpan)">
 <summary>
 Sets real-time reporting interval.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="interval">Default value: 5 sec, min value: 5 sec</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithReportFormats(NBomber.Contracts.NBomberContext,NBomber.Contracts.Stats.ReportFormat[])">
 <summary>
 Sets output report formats.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="reportFormats">The default value is: [Txt; Html; Csv; Md]</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithReportFolder(NBomber.Contracts.NBomberContext,System.String)">
 <summary>
 Sets output report folder path.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="reportFolderPath">Default folder path: "./reports".</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithReportFileName(NBomber.Contracts.NBomberContext,System.String)">
 <summary>
 Sets output report file name.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="reportFileName">Default name: "nbomber_report-{CurrentTime}"</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithMinimumLogLevel(NBomber.Contracts.NBomberContext,Serilog.Events.LogEventLevel)">
 <summary>
 Sets minimum log level.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="level">The default value is Debug</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.WithLoggerConfig(NBomber.Contracts.NBomberContext,System.Func{Serilog.LoggerConfiguration})">
 <summary>
 Sets logger configuration.
 Make sure that you always return a new instance of LoggerConfiguration.
 You can also configure the logger via JSON infrastructure config file.
 For this use NBomberRunner.LoadInfraConfig
 </summary>
 <param name="context">context</param>
 <param name="createLoggerConfig">creates a new instance of LoggerConfiguration</param>
 <example>
 <code>
 NBomberRunner.WithLoggerConfig(() => new LoggerConfiguration())
 </code>
 </example>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.Run(NBomber.Contracts.NBomberContext,System.String[])">
 <summary>
 Runs scenarios with CLI arguments.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="args">CLI args</param>
 <example>
 <code>
 Example:
 --config=config.json --infra=infra_config.json --target=scenario_1
 </code>
 </example>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.Run(NBomber.Contracts.NBomberContext)">
<summary>
 Runs scenarios.
</summary>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.RegisterScenarios(NBomber.Contracts.ScenarioProps[])">
<summary>
 Registers scenarios in NBomber environment.
</summary>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.LoadInfraConfig(NBomber.Contracts.NBomberContext,System.String)">
 <summary>
 Loads infrastructure configuration by file path or by HTTP URL.
 </summary>
 <param name="context"></param>
 <param name="path">File path or HTTP URL to JSON config.</param>
 <example>
 <code>
 // load by file path
 NBomberRunner.LoadInfraConfig("./my-test/infra-config.json")
 // load by URL
 NBomberRunner.LoadInfraConfig("https://my-test/infra-config.json")
 </code>
 </example>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.LoadConfig(NBomber.Contracts.NBomberContext,System.String)">
 <summary>
 Loads configuration by file path or by HTTP URL.
 </summary>
 <param name="context"></param>
 <param name="path">File path or HTTP URL to JSON config.</param>
 <example>
 <code>
 // load by file path
 NBomberRunner.LoadConfig("./my-test/config.json")
 // load by URL
 NBomberRunner.LoadConfig("https://my-test/config.json")
 </code>
 </example>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.EnableStopTestForcibly(NBomber.Contracts.NBomberContext,System.Boolean)">
 <summary>
 This method enables or disables to forcibly halt all tests at the end of the simulation even though NBomber is overloaded.
 Use when you need to stop your test at a precise time even if your NBomber is overloaded and can have a short lag.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="enable">The default value is false.</param>
</member>
<member name="M:NBomber.CSharp.NBomberRunner.EnableHintsAnalyzer(NBomber.Contracts.NBomberContext,System.Boolean)">
 <summary>
 This method enables or disables hints analyzer.
 Hints analyzer - analyzes statistics at the end of the test to provide hints in case of finding the wrong usage of NBomber or some environmental issues.
 </summary>
 <param name="context">NBomberContext</param>
 <param name="enable">The default value is false.</param>
</member>
<member name="T:NBomber.CSharp.NBomberRunner">
<summary>
 NBomberRunner is responsible for registering and running scenarios.
 Also it provides configuration points related to infrastructure, reporting, loading plugins.
</summary>
</member>
<member name="M:NBomber.CSharp.Scenario.WithoutWarmUp(NBomber.Contracts.ScenarioProps)">
 <summary>
 This method disables warm-up.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
</member>
<member name="M:NBomber.CSharp.Scenario.WithWarmUpDuration(NBomber.Contracts.ScenarioProps,System.TimeSpan)">
 <summary>
 This method sets duration of warm-up phase.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
 <param name="duration">By default warm-up duration is 30 seconds.</param>
</member>
<member name="M:NBomber.CSharp.Scenario.WithRestartIterationOnFail(NBomber.Contracts.ScenarioProps,System.Boolean)">
 <summary>
 This method allows enabling or disabling the auto restart of Scenario iteration in case of Step failure.
 Sometimes, you would like to handle failed steps differently: retry, ignore or use a fallback.
 For such cases, you can disable Scenario iteration auto restart.
 By default, when a Step returns a failed Response or unhandled exception was thrown,
 NBomber will automatically mark the whole iteration as failed and restart it.
 If you want to disable auto restart of Scenario iteration you should set 'shouldRestart: false'.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
 <param name="shouldRestart">The default value is true.
 If you want to disable auto restart of Scenario iteration you should set 'shouldRestart = false'.</param>
</member>
<member name="M:NBomber.CSharp.Scenario.WithMaxFailCount(NBomber.Contracts.ScenarioProps,System.Int32)">
 <summary>
 This method overrides the default value of MaxFailCount for Scenario.
 MaxFailCount is incremented on every failure or failed Response.
 When a scenario reaches MaxFailCount, NBomber will stop the whole load test.
 In the case of cluster mode, MaxFailCount is tracked per each NBomber instance exclusively.
 It doesn't aggregate across the cluster. So if on any NBomber node MaxFailCount is reached, NBomber will stop the whole load test.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
 <param name="maxFailCount">The default value is 5_000.</param>
</member>
<member name="M:NBomber.CSharp.Scenario.WithLoadSimulations(NBomber.Contracts.ScenarioProps,NBomber.Contracts.LoadSimulation[])">
 <summary>
 This method allows configuring the load simulations for the current Scenario.
 Load simulation allows configuring parallelism and workload profiles.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
 <param name="loadSimulations">Default value is: Simulation.KeepConstant(copies: 1, during: TimeSpan.FromMinutes(1))</param>
 <example>
 <code>
 scenario.WithLoadSimulations(
     Simulation.RampingConstant(copies: 50, during: TimeSpan.FromMinutes(1)) // ramp-up from 0 to 50 copies
     Simulation.KeepConstant(copies: 50, during: TimeSpan.FromMinutes(1))
 );
 </code>
 </example>
</member>
<member name="M:NBomber.CSharp.Scenario.WithInit(NBomber.Contracts.ScenarioProps,System.Func{NBomber.Contracts.IScenarioInitContext,System.Threading.Tasks.Task})">
 <summary>
 Initializes scenario and all its dependencies.
 You can use it to prepare your target system, populate the database, or read and apply the JSON configuration for your scenario.
 Scenario init will be invoked before warm-up and bombing phases.
 If Scenario init throws an exception, the NBomber load test will stop the execution.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
 <param name="initFunc">Represent lambda function that will be invoked to start Scenario initialization.
 If this lambda function throws an exception, the NBomber load test will stop the execution.</param>
</member>
<member name="M:NBomber.CSharp.Scenario.WithClean(NBomber.Contracts.ScenarioProps,System.Func{NBomber.Contracts.IScenarioInitContext,System.Threading.Tasks.Task})">
 <summary>
 Cleans scenario's resources and all its dependencies.
 This method should be used to clean the scenario's resources after the test finishes.
 Scenario clean will be invoked after warm-up and bombing phases.
 If Scenario clean throws an exception, the NBomber logs it and continues execution.
 </summary>
 <param name="scenario">Represent configuration data that is needed to build a scenario.</param>
 <param name="cleanFunc">Represent lambda function that will be invoked to start Scenario cleaning.
 If this lambda function throws an exception, the NBomber logs it and continues execution.</param>
</member>
<member name="M:NBomber.CSharp.Scenario.Empty(System.String)">
 <summary>
 Creates an empty scenario.
 An empty scenario is useful when you want to create the scenario to do only initialization or cleaning and execute it separately.
 The need for this can be when you have a few scenarios with the same init logic, and you want to run this init logic only once.
 </summary>
 <param name="name">The name of the scenario.</param>
</member>
<member name="M:NBomber.CSharp.Scenario.Create(System.String,System.Func{NBomber.Contracts.IScenarioContext,System.Threading.Tasks.Task{NBomber.Contracts.IResponse}})">
 <summary>
 Creates a scenario.
 </summary>
 <param name="run">It's a function that represents user flow that will be invoked and measured by NBomber.</param>
 <param name="name">The name of the scenario.</param>
</member>
<member name="T:NBomber.CSharp.Scenario">
<summary>
 Scenario play the most crucial role in building load tests with NBomber.
 Scenario represents typical user behavior.
 In other words - it’s a workflow that virtual users will follow.
 Technically speaking, each Scenario instance works as a dedicated .NET Task.
</summary>
</member>
<member name="M:NBomber.CSharp.Step.Run``1(System.String,NBomber.Contracts.IScenarioContext,System.Func{System.Threading.Tasks.Task{NBomber.Contracts.Response{``0}}})">
 <summary>
 Runs a step.
 </summary>
 <param name="name">The name of the step. It can be any name except reserved name "global information".</param>
 <param name="context">ScenarioContext represents the execution context of the currently running Scenario. It provides functionality to log particular events, get information about the test, thread id, scenario copy/instance number, etc. Also, it provides the option to stop all or particular scenarios manually.</param>
 <param name="run">It's a function that represents user action that will be invoked and measured by NBomber.</param>
</member>
<member name="T:NBomber.CSharp.Step">
<summary>
 Step represents a single user action like login, logout, etc. Step helps you granulate your Scenario execution on parts and measure them separately.
 In case you don&apos;t need to split your Scenario on parts you can use just Scenario without any Step.
</summary>
</member>
<member name="P:NBomber.Plugins.Network.Ping.PingPluginConfig.Timeout">
<summary>
 The default is 1000 ms.
</summary>
</member>
<member name="P:NBomber.Plugins.Network.Ping.PingPluginConfig.DontFragment">
<summary>
 Sets a Boolean value that controls fragmentation of the data sent to the remote host.
 true if the data cannot be sent in multiple packets; otherwise false. The default is false
 This option is useful if you want to test the maximum transmission unit (MTU)
 of the routers and gateways used to transmit the packet.
 If this property is true and the data sent to the remote host is larger then the MTU of a gateway
 or router between the sender and the remote host, the ping operation fails with status PacketTooBig.
</summary>
</member>
<member name="P:NBomber.Plugins.Network.Ping.PingPluginConfig.Ttl">
<summary>
 Sets the number of routing nodes that can forward the Ping data before it is discarded.
 An Int32 value that specifies the number of times the Ping data packets can be forwarded. The default is 128.
</summary>
</member>
<member name="P:NBomber.Plugins.Network.Ping.PingPluginConfig.BufferSizeBytes">
<summary>
 A buffer of data to be transmitted. The default is 32.
 If you believe that a larger (or smaller) packet size will noticeably affect
 the response time from the target host, then you may wish to experiment with
 different values.  The range of sizes is from 1 to 65500.  Note that values
 (for Ethernet) require that the packet be fragmented for any value over 1386
 bytes in the data field.
</summary>
</member>
<member name="M:NBomber.Plugins.Network.Ping.PingPluginHintsAnalyzer.analyze(System.Tuple{System.String,System.Net.NetworkInformation.PingReply}[])">
<summary>
 (hostName * result)[]
</summary>
</member>
<member name="P:NBomber.Plugins.Network.PsPing.PsPingPluginConfig.Timeout">
<summary>
 The default is 1000 ms.
</summary>
</member>
<member name="M:NBomber.Plugins.Network.PsPing.PsPingPluginHintsAnalyzer.analyze(System.Tuple{System.String,System.Int32,NBomber.Plugins.Network.PsPing.PsPingReply}[])">
<summary>
 (hostName * result)[]
</summary>
</member>
</members>
</doc>
