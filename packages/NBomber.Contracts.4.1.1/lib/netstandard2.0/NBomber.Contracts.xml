<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>NBomber.Contracts</name></assembly>
<members>
<member name="M:NBomber.Contracts.IWorkerPlugin.Stop">
 <summary>
 Stops execution.
 This method will be invoked two times: for a warm-up(if it's enabled) and the bombing.
 </summary>    
 <example>
 <code>
 // to get info about the current operation:    
 IBaseContext.GetNodeInfo().CurrentOperation == OperationType.WarmUp    
 </code>
 </example>
</member>
<member name="M:NBomber.Contracts.IWorkerPlugin.Start">
 <summary>
 Starts execution.
 This method will be invoked two times: for a warm-up(if it's enabled) and the bombing.
 </summary>    
 <example>
 <code>
 // to get info about the current operation:    
 IBaseContext.GetNodeInfo().CurrentOperation == OperationType.WarmUp    
 </code>
 </example>
</member>
<member name="M:NBomber.Contracts.IWorkerPlugin.Init(NBomber.Contracts.IBaseContext,Microsoft.Extensions.Configuration.IConfiguration)">
 <summary>
 Inits WorkerPlugin.
 Usually, in this method, WorkerPlugin reads JSON configuration and prepare all necessary dependencies.
 </summary>
 <param name="context">Base NBomber execution context. It can be used to get a logger, test info, etc.</param>
 <param name="infraConfig">Represent JSON config for infrastructure.</param>
</member>
<member name="T:NBomber.Contracts.IWorkerPlugin">
<summary>
 WorkerPlugin provides functionality for building background workers.
 The basic concept of a background worker - it&apos;s a worker that starts in parallel with a test and does some work, and then can return statistics that will be included into report.
 A good example of a background worker is PingPlugin which checks the physical latency between NBomber&apos;s agent and target system and then prints results in a report. 
</summary>
</member>
<member name="M:NBomber.Contracts.IReportingSink.Stop">
 <summary>
 Stops execution and saves a metric representing the load test's STOP.    
 This method will be invoked two times: for a warm-up(if it's enabled) and the bombing.
 By default, this method shouldn't execute any logic related to cleaning ReportingSink's resources, opened connections, etc.
 To clean resources, ReportingSink implements the IDisposal interface. 
 </summary>
 <example>
 <code>
 // to get info about the current operation:    
 IBaseContext.GetNodeInfo().CurrentOperation == OperationType.WarmUp    
 </code>
 </example>
</member>
<member name="M:NBomber.Contracts.IReportingSink.Start">
 <summary>
 Starts execution and saves a metric representing the load test's START.
 This method will be invoked two times: for a warm-up(if it's enabled) and the bombing.    
 </summary>
 <example>
 <code>
 // to get info about the current operation:    
 IBaseContext.GetNodeInfo().CurrentOperation == OperationType.WarmUp    
 </code>
 </example>
</member>
<member name="M:NBomber.Contracts.IReportingSink.SaveRealtimeStats(NBomber.Contracts.Stats.ScenarioStats[])">
 <summary>
 Saves real-time stats data.
 This method will be invoked periodically, by specified ReportingInterval.
 </summary>
 <param name="stats">Real-time stats data of the running scenarios.</param>
</member>
<member name="M:NBomber.Contracts.IReportingSink.SaveFinalStats(NBomber.Contracts.Stats.NodeStats)">
 <summary>
 Saves final stats data.
 This method will be invoked when the load test is finished.
 </summary>
 <param name="stats">Final stats data of the finished scenarios.</param>
</member>
<member name="M:NBomber.Contracts.IReportingSink.Init(NBomber.Contracts.IBaseContext,Microsoft.Extensions.Configuration.IConfiguration)">
 <summary>
 Inits ReportingSink.
 Usually, in this method, ReportingSink reads JSON configuration and establishes a connection to reporting data storage.
 </summary>
 <param name="context">Base NBomber execution context. It can be used to get a logger, test info, etc.</param>
 <param name="infraConfig">Represent JSON config for infrastructure.</param>
</member>
<member name="T:NBomber.Contracts.IReportingSink">
<summary>
 ReportingSink provides functionality for saving real-time and final statistics.
</summary>
</member>
<member name="T:NBomber.Contracts.LoadSimulation.Pause">
 <summary>
 Introduces Scenario pause simulation for a given duration.
 It's useful for cases when some Scenario start should be delayed or paused in the middle of execution.
 </summary>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="T:NBomber.Contracts.LoadSimulation.InjectRandom">
 <summary>
 Injects a given random number of Scenario copies(instances) during a given duration.
 Each Scenario copy behaves like a short-running thread that runs only once and then is destroyed.
 With this simulation, you control the Scenario injection rate and injection interval.
 Use it when you want to maintain a random rate of requests without being affected by the performance of the system you load test.
 Usually, this simulation type is used to test HTTP API.
 </summary>
 <param name="minRate">The min injection rate of Scenario copies.</param>
 <param name="maxRate">The max injection rate of Scenario copies.</param>
 <param name="interval">The injection interval. It configures the interval between injections.</param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="T:NBomber.Contracts.LoadSimulation.Inject">
 <summary>
 Injects a given number of Scenario copies(instances) during a given duration.
 Each Scenario copy behaves like a short-running thread that runs only once and then is destroyed.
 With this simulation, you control the Scenario injection rate and injection interval.
 Use it when you want to maintain a constant rate of requests without being affected by the performance of the system you load test.
 Usually, this simulation type is used to test HTTP API.
 </summary>
 <param name="rate">The injection rate of Scenario copies. It configures how many concurrent copies will be injected at a time.</param>
 <param name="interval">The injection interval. It configures the interval between injections. </param>
 <param name="during">The duration of load simulation.</param>   
</member>
<member name="T:NBomber.Contracts.LoadSimulation.RampingInject">
 <summary>
 Injects a given number of Scenario copies(instances) with a linear ramp over a given duration.
 Each Scenario copy behaves like a short-running thread that runs only once and then is destroyed.
 With this simulation, you control the Scenario injection rate and injection interval.
 Use it for a smooth ramp up and ramp down.
 Usually, this simulation type is used to test HTTP API.
 </summary>
 <param name="rate">The injection rate of Scenario copies. It configures how many concurrent copies will be injected at a time.</param>
 <param name="interval">The injection interval. It configures the interval between injections. </param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="T:NBomber.Contracts.LoadSimulation.KeepConstant">
 <summary>
 Keeps activated(constantly running) a fixed number of Scenario copies(instances) which executes as many iterations as possible for a specified duration.
 Each Scenario copy behaves like a long-running thread that runs continually(by specified duration) and will be destroyed when the current load simulation stops.
 Use it when you need to run and keep a constant amount of Scenario copies for a specific period.
 Usually, this simulation type is used to test databases, message brokers, or any other system that works with a static client's pool of connections and reuses them.    
 </summary>
 <param name="copies">The number of concurrent Scenario copies that will be running in parallel.</param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="T:NBomber.Contracts.LoadSimulation.RampingConstant">
 <summary>
 Adds or removes a given number of Scenario copies(instances) with a linear ramp over a given duration.    
 Each Scenario copy behaves like a long-running thread that runs continually(by specified duration) and will be destroyed when the current load simulation stops.
 Use it for a smooth ramp up and ramp down.
 Usually, this simulation type is used to test databases, message brokers, or any other system that works with a static client's pool of connections and reuses them.        
 </summary>
 <param name="copies">The number of concurrent Scenario copies that will be running in parallel.</param>
 <param name="during">The duration of load simulation.</param>
</member>
<member name="T:NBomber.Contracts.LoadSimulation">
<summary>
 LoadSimulation allows configuring parallelism and workload profiles. 
</summary>
</member>
<member name="P:NBomber.Contracts.IScenarioInitContext.TestInfo">
<summary>
 Gets current test info
</summary>
</member>
<member name="P:NBomber.Contracts.IScenarioInitContext.ScenarioPartition">
<summary>
 Gets scenario partition in the cluster.
 In the cluster mode, the Coordinator automatically assigns ScenarioPartition to each Agent that runs the same Scenario. 
</summary>
</member>
<member name="P:NBomber.Contracts.IScenarioInitContext.ScenarioInfo">
<summary>
 Gets current Scenario info
</summary>
</member>
<member name="P:NBomber.Contracts.IScenarioInitContext.NodeInfo">
<summary>
 Gets current node info
</summary>
</member>
<member name="P:NBomber.Contracts.IScenarioInitContext.Logger">
<summary>
 NBomber&apos;s logger
</summary>
</member>
<member name="P:NBomber.Contracts.IScenarioInitContext.CustomSettings">
<summary>
 Gets client settings content from configuration file
</summary>
</member>
<member name="P:NBomber.Contracts.ScenarioPartition.Count">
<summary>
 Gets scenario partitions count in the cluster.
</summary>
</member>
<member name="P:NBomber.Contracts.ScenarioPartition.Number">
<summary>
 Gets scenario partition number in the cluster.    
</summary>
</member>
<member name="T:NBomber.Contracts.ScenarioPartition">
<summary>
 Represents scenario partition.
 In the cluster mode, the Coordinator automatically assigns ScenarioPartition to each Agent that runs the same Scenario.
</summary>
</member>
<member name="T:NBomber.Contracts.IScenarioContext">
<summary>
 ScenarioContext represents the execution context of the currently running Scenario.
 It provides functionality to log particular events, get information about the test, thread id, scenario copy/instance number, etc.
 Also, it provides the option to stop all or particular scenarios manually.
</summary>
</member>
<member name="P:NBomber.Contracts.IBaseContext.TestInfo">
<summary>
 Gets current test info. 
</summary>
</member>
<member name="P:NBomber.Contracts.IBaseContext.Logger">
<summary>
 NBomber&apos;s logger.
</summary>
</member>
<member name="M:NBomber.Contracts.IBaseContext.GetNodeInfo">
<summary>
 Gets current node info.
</summary>
</member>
<member name="P:NBomber.Contracts.ScenarioInfo.ScenarioOperation">
<summary>
 Returns info about current operation type.
 It can be: WarmUp or Bombing.
</summary>
</member>
<member name="P:NBomber.Contracts.ScenarioInfo.ThreadId">
<summary>
 Gets the current scenario thread id.
 You can use it as correlation id.
</summary>
</member>
</members>
</doc>
